<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classmangrove_1_1model" kind="class" language="C++" prot="public">
    <compoundname>mangrove::model</compoundname>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
      <param>
        <type>typename IdType</type>
        <defval>bsoncxx::oid</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="classmangrove_1_1model_1a271b8d6ce42adee73f566f7e915cc64c" prot="private" static="yes" mutable="no">
        <type>thread_local <ref refid="classmangrove_1_1collection__wrapper" kindref="compound">collection_wrapper</ref>&lt; T &gt;</type>
        <definition>thread_local collection_wrapper&lt; T &gt; mangrove::model&lt; T, IdType &gt;::_coll</definition>
        <argsstring></argsstring>
        <name>_coll</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/mangrove/model.hpp" line="36" column="1" bodyfile="src/mangrove/model.hpp" bodystart="36" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classmangrove_1_1model_1ac128db17c9f55de416f81130119bf489" prot="protected" static="no" mutable="no">
        <type>IdType</type>
        <definition>IdType mangrove::model&lt; T, IdType &gt;::_id</definition>
        <argsstring></argsstring>
        <name>_id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/mangrove/model.hpp" line="357" column="1" bodyfile="src/mangrove/model.hpp" bodystart="357" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classmangrove_1_1model_1aad4ed1da2c483620d05c93cdc506e356" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
          <param>
            <type>typename</type>
            <defval>std::enable_if_t&lt;!<ref refid="structmangrove_1_1first__two__types__are__same" kindref="compound">first_two_types_are_same</ref>&lt;<ref refid="classmangrove_1_1model" kindref="compound">model</ref>, Ts...&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type></type>
        <definition>mangrove::model&lt; T, IdType &gt;::model</definition>
        <argsstring>(Ts &amp;&amp;...ts)</argsstring>
        <name>model</name>
        <param>
          <type>Ts &amp;&amp;...</type>
          <declname>ts</declname>
        </param>
        <briefdescription>
<para>Forward the arguments to the constructor of IdType. </para>        </briefdescription>
        <detaileddescription>
<para>A std::enable_if is included to disable the template for the copy constructor case so the default is used.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ts</parametername>
</parameternamelist>
<parameterdescription>
<para>The variadic pack of arguments to be forwarded to the constructor of IdType. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/mangrove/model.hpp" line="51" column="1" bodyfile="src/mangrove/model.hpp" bodystart="51" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="classmangrove_1_1model_1a090ccf608ccb4b8aa612778606a860a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>mangrove::model&lt; T, IdType &gt;::model</definition>
        <argsstring>()=default</argsstring>
        <name>model</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/mangrove/model.hpp" line="54" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmangrove_1_1model_1a1502c90fc3a7c9664a2578efb63e0371" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void mangrove::model&lt; T, IdType &gt;::remove</definition>
        <argsstring>()</argsstring>
        <name>remove</name>
        <briefdescription>
<para>Deletes this object from the underlying collection. </para>        </briefdescription>
        <detaileddescription>
<para>In the terms of the CRUD specification, this uses deleteOne with the _id as the sole argument to the query filter.</para><para><simplesect kind="see"><para><ulink url="https://docs.mongodb.com/manual/reference/method/db.collection.deleteOne/">https://docs.mongodb.com/manual/reference/method/db.collection.deleteOne/</ulink> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/mangrove/model.hpp" line="262" column="1" bodyfile="src/mangrove/model.hpp" bodystart="262" bodyend="267"/>
      </memberdef>
      <memberdef kind="function" id="classmangrove_1_1model_1a0dd3802e09d149f4bfa8661b7992c177" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void mangrove::model&lt; T, IdType &gt;::save</definition>
        <argsstring>()</argsstring>
        <name>save</name>
        <briefdescription>
<para>Performs an update in the database that saves the current T object instance to the collection mapped to this class. </para>        </briefdescription>
        <detaileddescription>
<para>In the terms of the CRUD specification, this uses updateOne with the _id as the sole argument to the query filter, the T object serialized to dotted notation BSON as the $set operand, and upsert=true so that objects that aren&apos;t already in the collection are automatically inserted.</para><para><simplesect kind="see"><para><ulink url="https://docs.mongodb.com/manual/reference/method/db.collection.updateOne/">https://docs.mongodb.com/manual/reference/method/db.collection.updateOne/</ulink> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/mangrove/model.hpp" line="299" column="1" bodyfile="src/mangrove/model.hpp" bodystart="299" bodyend="312"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classmangrove_1_1model_1a4dac6424aa52c96fc184926f00570836" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::int64_t</type>
        <definition>static std::int64_t mangrove::model&lt; T, IdType &gt;::count</definition>
        <argsstring>(bsoncxx::document::view_or_value filter=bsoncxx::document::view_or_value{}, const mongocxx::options::count &amp;options=mongocxx::options::count())</argsstring>
        <name>count</name>
        <param>
          <type>bsoncxx::document::view_or_value</type>
          <declname>filter</declname>
          <defval>bsoncxx::document::view_or_value{}</defval>
        </param>
        <param>
          <type>const mongocxx::options::count &amp;</type>
          <declname>options</declname>
          <defval>mongocxx::options::count()</defval>
        </param>
        <briefdescription>
<para>Counts the number of documents matching the provided filter. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filter</parametername>
</parameternamelist>
<parameterdescription>
<para>The filter that documents must match in order to be counted. If a filter is not provided, <ref refid="classmangrove_1_1model_1a4dac6424aa52c96fc184926f00570836" kindref="member">count()</ref> will count the number of documents in the entire collection. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional arguments, see mongocxx::options::count.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The count of the documents that matched the filter. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>mongocxx::exception::query</parametername>
</parameternamelist>
<parameterdescription>
<para>if the count operation fails.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ulink url="https://docs.mongodb.com/manual/reference/command/count/">https://docs.mongodb.com/manual/reference/command/count/</ulink> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/mangrove/model.hpp" line="71" column="1" bodyfile="src/mangrove/model.hpp" bodystart="71" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="classmangrove_1_1model_1a0d52a9bedf4808ef8cc98f02a9e9083b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const mongocxx::collection</type>
        <definition>static const mongocxx::collection mangrove::model&lt; T, IdType &gt;::collection</definition>
        <argsstring>()</argsstring>
        <name>collection</name>
        <briefdescription>
<para>Returns a copy of the underlying collection. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A copy of the underlying mongocxx::collection that this class uses to store and load instances of T. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/mangrove/model.hpp" line="83" column="1" bodyfile="src/mangrove/model.hpp" bodystart="83" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="classmangrove_1_1model_1ada372a128865c770d7b2334990ad6f5f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>mongocxx::stdx::optional&lt; mongocxx::result::delete_result &gt;</type>
        <definition>static mongocxx::stdx::optional&lt;mongocxx::result::delete_result&gt; mangrove::model&lt; T, IdType &gt;::delete_many</definition>
        <argsstring>(bsoncxx::document::view_or_value filter, const mongocxx::options::delete_options &amp;options=mongocxx::options::delete_options())</argsstring>
        <name>delete_many</name>
        <param>
          <type>bsoncxx::document::view_or_value</type>
          <declname>filter</declname>
        </param>
        <param>
          <type>const mongocxx::options::delete_options &amp;</type>
          <declname>options</declname>
          <defval>mongocxx::options::delete_options()</defval>
        </param>
        <briefdescription>
<para>Deletes all matching documents from the collection. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filter</parametername>
</parameternamelist>
<parameterdescription>
<para>Document view representing the data to be deleted. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional arguments, see mongocxx::options::delete_options.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The optional result of performing the deletion, a mongocxx::result::delete_result. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>mongocxx::exception::write</parametername>
</parameternamelist>
<parameterdescription>
<para>if the delete fails.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ulink url="http://docs.mongodb.com/manual/reference/command/delete/">http://docs.mongodb.com/manual/reference/command/delete/</ulink> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/mangrove/model.hpp" line="100" column="1" bodyfile="src/mangrove/model.hpp" bodystart="100" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="classmangrove_1_1model_1a18e41c79c88891dcfaea88e3cc6df09c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>mongocxx::stdx::optional&lt; mongocxx::result::delete_result &gt;</type>
        <definition>static mongocxx::stdx::optional&lt;mongocxx::result::delete_result&gt; mangrove::model&lt; T, IdType &gt;::delete_one</definition>
        <argsstring>(bsoncxx::document::view_or_value filter, const mongocxx::options::delete_options &amp;options=mongocxx::options::delete_options())</argsstring>
        <name>delete_one</name>
        <param>
          <type>bsoncxx::document::view_or_value</type>
          <declname>filter</declname>
        </param>
        <param>
          <type>const mongocxx::options::delete_options &amp;</type>
          <declname>options</declname>
          <defval>mongocxx::options::delete_options()</defval>
        </param>
        <briefdescription>
<para>Deletes a single matching document from the collection. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filter</parametername>
</parameternamelist>
<parameterdescription>
<para>Document view representing the data to be deleted. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional arguments, see mongocxx::options::delete_options.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The optional result of performing the deletion, a mongocxx::result::delete_result. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>mongocxx::exception::write</parametername>
</parameternamelist>
<parameterdescription>
<para>if the delete fails.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ulink url="http://docs.mongodb.com/manual/reference/command/delete/">http://docs.mongodb.com/manual/reference/command/delete/</ulink> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/mangrove/model.hpp" line="119" column="1" bodyfile="src/mangrove/model.hpp" bodystart="119" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="classmangrove_1_1model_1a14472adea853a46b9e76aef6cb2cd246" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void mangrove::model&lt; T, IdType &gt;::drop</definition>
        <argsstring>()</argsstring>
        <name>drop</name>
        <briefdescription>
<para>Drops the underlying collection and all its contained documents from the database. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>exception::operation</parametername>
</parameternamelist>
<parameterdescription>
<para>if the operation fails.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ulink url="https://docs.mongodb.com/manual/reference/method/db.collection.drop/">https://docs.mongodb.com/manual/reference/method/db.collection.drop/</ulink> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/mangrove/model.hpp" line="132" column="1" bodyfile="src/mangrove/model.hpp" bodystart="132" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="classmangrove_1_1model_1aa0be0e6204d17a62797f3384cbb5a6b1" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classmangrove_1_1deserializing__cursor" kindref="compound">deserializing_cursor</ref>&lt; T &gt;</type>
        <definition>static deserializing_cursor&lt;T&gt; mangrove::model&lt; T, IdType &gt;::find</definition>
        <argsstring>(bsoncxx::document::view_or_value filter, const mongocxx::options::find &amp;options=mongocxx::options::find())</argsstring>
        <name>find</name>
        <param>
          <type>bsoncxx::document::view_or_value</type>
          <declname>filter</declname>
        </param>
        <param>
          <type>const mongocxx::options::find &amp;</type>
          <declname>options</declname>
          <defval>mongocxx::options::find()</defval>
        </param>
        <briefdescription>
<para>Finds the documents in this collection which match the provided filter. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filter</parametername>
</parameternamelist>
<parameterdescription>
<para>Document view representing a document that should match the query. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional arguments, see mongocxx::options::find</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Cursor with deserialized objects from the collection. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>If</parametername>
</parameternamelist>
<parameterdescription>
<para>the find failed, the returned cursor will throw mongocxx::exception::query when it is iterated.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ulink url="https://docs.mongodb.com/manual/tutorial/query-documents/">https://docs.mongodb.com/manual/tutorial/query-documents/</ulink> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/mangrove/model.hpp" line="151" column="1" bodyfile="src/mangrove/model.hpp" bodystart="151" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="classmangrove_1_1model_1a36488dcf05af9a7426bdebb40fbbd8d4" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>mongocxx::stdx::optional&lt; T &gt;</type>
        <definition>static mongocxx::stdx::optional&lt;T&gt; mangrove::model&lt; T, IdType &gt;::find_one</definition>
        <argsstring>(bsoncxx::document::view_or_value filter, const mongocxx::options::find &amp;options=mongocxx::options::find())</argsstring>
        <name>find_one</name>
        <param>
          <type>bsoncxx::document::view_or_value</type>
          <declname>filter</declname>
        </param>
        <param>
          <type>const mongocxx::options::find &amp;</type>
          <declname>options</declname>
          <defval>mongocxx::options::find()</defval>
        </param>
        <briefdescription>
<para>Finds a single document in this collection that matches the provided filter. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filter</parametername>
</parameternamelist>
<parameterdescription>
<para>Document view representing a document that should match the query. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional arguments, see mongocxx::options::find</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An optional object that matched the filter. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>mongocxx::exception::query</parametername>
</parameternamelist>
<parameterdescription>
<para>if the operation fails.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ulink url="https://docs.mongodb.com/manual/tutorial/query-documents/">https://docs.mongodb.com/manual/tutorial/query-documents/</ulink> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/mangrove/model.hpp" line="170" column="1" bodyfile="src/mangrove/model.hpp" bodystart="170" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="classmangrove_1_1model_1a7250891868c6bab48f1cd741f8164b46" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename container_type</type>
          </param>
          <param>
            <type>typename</type>
            <defval>std::enable_if_t&lt;container_of_v&lt;container_type, T&gt;&gt;</defval>
          </param>
        </templateparamlist>
        <type>mongocxx::stdx::optional&lt; mongocxx::result::insert_many &gt;</type>
        <definition>static mongocxx::stdx::optional&lt;mongocxx::result::insert_many&gt; mangrove::model&lt; T, IdType &gt;::insert_many</definition>
        <argsstring>(const container_type &amp;container, const mongocxx::options::insert &amp;options=mongocxx::options::insert())</argsstring>
        <name>insert_many</name>
        <param>
          <type>const container_type &amp;</type>
          <declname>container</declname>
        </param>
        <param>
          <type>const mongocxx::options::insert &amp;</type>
          <declname>options</declname>
          <defval>mongocxx::options::insert()</defval>
        </param>
        <briefdescription>
<para>Inserts multiple object of the model into the collection. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>This method uses the bulk insert command to execute the insertion as opposed to the legacy OP_INSERT wire protocol message. As a result, using this method to insert many documents on MongoDB &lt; 2.6 will be slow.</para></simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>containter_type</parametername>
</parameternamelist>
<parameterdescription>
<para>The container type. Must contain an iterator that yields objects of this model.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>container</parametername>
</parameternamelist>
<parameterdescription>
<para>Container of model objects to insert. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional arguments, see mongocxx::options::insert.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ulink url="https://docs.mongodb.com/manual/tutorial/insert-documents/">https://docs.mongodb.com/manual/tutorial/insert-documents/</ulink></para></simplesect>
<simplesect kind="return"><para>The result of attempting to performing the insert. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>mongocxx::exception::write</parametername>
</parameternamelist>
<parameterdescription>
<para>when the operation fails. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/mangrove/model.hpp" line="198" column="1" bodyfile="src/mangrove/model.hpp" bodystart="198" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="classmangrove_1_1model_1a14db2af5bc4d46898e2a643797bff060" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename object_iterator_type</type>
          </param>
          <param>
            <type>typename</type>
            <defval>std::enable_if_t&lt;iterator_of_v&lt;object_iterator_type, T&gt;&gt;</defval>
          </param>
        </templateparamlist>
        <type>mongocxx::stdx::optional&lt; mongocxx::result::insert_many &gt;</type>
        <definition>static mongocxx::stdx::optional&lt;mongocxx::result::insert_many&gt; mangrove::model&lt; T, IdType &gt;::insert_many</definition>
        <argsstring>(object_iterator_type begin, object_iterator_type end, const mongocxx::options::insert &amp;options=mongocxx::options::insert())</argsstring>
        <name>insert_many</name>
        <param>
          <type>object_iterator_type</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>object_iterator_type</type>
          <declname>end</declname>
        </param>
        <param>
          <type>const mongocxx::options::insert &amp;</type>
          <declname>options</declname>
          <defval>mongocxx::options::insert()</defval>
        </param>
        <briefdescription>
<para>Inserts multiple objects of the model into the collection. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>This method uses the bulk insert command to execute the insertion as opposed to the legacy OP_INSERT wire protocol message. As a result, using this method to insert many documents on MongoDB &lt; 2.6 will be slow.</para></simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>object_iterator_type</parametername>
</parameternamelist>
<parameterdescription>
<para>The iterator type. Must meet the requirements for the input iterator concept with the model class as the value type.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>begin</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator pointing to the first document to be inserted. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator pointing to the end of the documents to be inserted. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional arguments, see mongocxx::options::insert.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ulink url="https://docs.mongodb.com/manual/tutorial/insert-documents/">https://docs.mongodb.com/manual/tutorial/insert-documents/</ulink></para></simplesect>
<simplesect kind="return"><para>The result of attempting to performing the insert. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>mongocxx::exception::write</parametername>
</parameternamelist>
<parameterdescription>
<para>if the operation fails. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/mangrove/model.hpp" line="230" column="1" bodyfile="src/mangrove/model.hpp" bodystart="230" bodyend="234"/>
      </memberdef>
      <memberdef kind="function" id="classmangrove_1_1model_1ad9695cdffd6a1abcd62d791caa6943e8" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>mongocxx::stdx::optional&lt; mongocxx::result::insert_one &gt;</type>
        <definition>static mongocxx::stdx::optional&lt;mongocxx::result::insert_one&gt; mangrove::model&lt; T, IdType &gt;::insert_one</definition>
        <argsstring>(T obj, const mongocxx::options::insert &amp;options=mongocxx::options::insert())</argsstring>
        <name>insert_one</name>
        <param>
          <type>T</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>const mongocxx::options::insert &amp;</type>
          <declname>options</declname>
          <defval>mongocxx::options::insert()</defval>
        </param>
        <briefdescription>
<para>Inserts a single object of the model into the collection. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>The object of the model to insert. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional arguments, see mongocxx::options::insert.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ulink url="https://docs.mongodb.com/manual/tutorial/insert-documents/">https://docs.mongodb.com/manual/tutorial/insert-documents/</ulink></para></simplesect>
<simplesect kind="return"><para>The result of attempting to perform the insert. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>mongocxx::exception::write</parametername>
</parameternamelist>
<parameterdescription>
<para>if the operation fails. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/mangrove/model.hpp" line="249" column="1" bodyfile="src/mangrove/model.hpp" bodystart="249" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="classmangrove_1_1model_1aa292dacb7aa8fc25c9f0fa758e5419fd" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void mangrove::model&lt; T, IdType &gt;::setCollection</definition>
        <argsstring>(const mongocxx::collection &amp;coll)</argsstring>
        <name>setCollection</name>
        <param>
          <type>const mongocxx::collection &amp;</type>
          <declname>coll</declname>
        </param>
        <briefdescription>
<para>Sets the underlying mongocxx::collection used to store and load instances of T. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>coll</parametername>
</parameternamelist>
<parameterdescription>
<para>The mongocxx::collection object to be mapped to this class.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This must be called with a new mongocxx::collection instance for every thread for the model to be thread-safe.</para></simplesect>
<simplesect kind="warning"><para>The parent mongocxx::client from which the mongocxx::collection argument was created must outlive any of this model&apos;s CRUD methods. If the client object goes out of scope, a new collection must be passed to this method before using any CRUD methods. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/mangrove/model.hpp" line="281" column="1" bodyfile="src/mangrove/model.hpp" bodystart="281" bodyend="283"/>
      </memberdef>
      <memberdef kind="function" id="classmangrove_1_1model_1a954cb71260009968735e59bc3c3b65f9" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void mangrove::model&lt; T, IdType &gt;::setCollection</definition>
        <argsstring>(mongocxx::collection &amp;&amp;coll)</argsstring>
        <name>setCollection</name>
        <param>
          <type>mongocxx::collection &amp;&amp;</type>
          <declname>coll</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/mangrove/model.hpp" line="284" column="1" bodyfile="src/mangrove/model.hpp" bodystart="284" bodyend="286"/>
      </memberdef>
      <memberdef kind="function" id="classmangrove_1_1model_1ab811a568d41f8721b679d5e509bf9072" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>mongocxx::stdx::optional&lt; mongocxx::result::update &gt;</type>
        <definition>static mongocxx::stdx::optional&lt;mongocxx::result::update&gt; mangrove::model&lt; T, IdType &gt;::update_many</definition>
        <argsstring>(bsoncxx::document::view_or_value filter, bsoncxx::document::view_or_value update, const mongocxx::options::update &amp;options=mongocxx::options::update())</argsstring>
        <name>update_many</name>
        <param>
          <type>bsoncxx::document::view_or_value</type>
          <declname>filter</declname>
        </param>
        <param>
          <type>bsoncxx::document::view_or_value</type>
          <declname>update</declname>
        </param>
        <param>
          <type>const mongocxx::options::update &amp;</type>
          <declname>options</declname>
          <defval>mongocxx::options::update()</defval>
        </param>
        <briefdescription>
<para>Updates multiple documents matching the provided filter in this collection. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filter</parametername>
</parameternamelist>
<parameterdescription>
<para>Document representing the match criteria. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>update</parametername>
</parameternamelist>
<parameterdescription>
<para>Document representing the update to be applied to matching documents. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional arguments, see mongocxx::options::update.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result of attempting to update multiple documents. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>exception::write</parametername>
</parameternamelist>
<parameterdescription>
<para>if the update operation fails.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ulink url="http://docs.mongodb.com/manual/reference/command/update/">http://docs.mongodb.com/manual/reference/command/update/</ulink> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/mangrove/model.hpp" line="329" column="1" bodyfile="src/mangrove/model.hpp" bodystart="329" bodyend="333"/>
      </memberdef>
      <memberdef kind="function" id="classmangrove_1_1model_1ab0d60c7d8c2285e90456547f40b9f873" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>mongocxx::stdx::optional&lt; mongocxx::result::update &gt;</type>
        <definition>static mongocxx::stdx::optional&lt;mongocxx::result::update&gt; mangrove::model&lt; T, IdType &gt;::update_one</definition>
        <argsstring>(bsoncxx::document::view_or_value filter, bsoncxx::document::view_or_value update, const mongocxx::options::update &amp;options=mongocxx::options::update())</argsstring>
        <name>update_one</name>
        <param>
          <type>bsoncxx::document::view_or_value</type>
          <declname>filter</declname>
        </param>
        <param>
          <type>bsoncxx::document::view_or_value</type>
          <declname>update</declname>
        </param>
        <param>
          <type>const mongocxx::options::update &amp;</type>
          <declname>options</declname>
          <defval>mongocxx::options::update()</defval>
        </param>
        <briefdescription>
<para>Updates a single document matching the provided filter in this collection. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filter</parametername>
</parameternamelist>
<parameterdescription>
<para>Document representing the match criteria. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>update</parametername>
</parameternamelist>
<parameterdescription>
<para>Document representing the update to be applied to a matching document. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional arguments, see mongocxx::options::update.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result of attempting to update a document. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>mongocxx::exception::write</parametername>
</parameternamelist>
<parameterdescription>
<para>if the update operation fails.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ulink url="http://docs.mongodb.com/manual/reference/command/update/">http://docs.mongodb.com/manual/reference/command/update/</ulink> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/mangrove/model.hpp" line="350" column="1" bodyfile="src/mangrove/model.hpp" bodystart="350" bodyend="354"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/mangrove/model.hpp" line="29" column="1" bodyfile="src/mangrove/model.hpp" bodystart="29" bodyend="358"/>
    <listofallmembers>
      <member refid="classmangrove_1_1model_1a271b8d6ce42adee73f566f7e915cc64c" prot="private" virt="non-virtual"><scope>mangrove::model</scope><name>_coll</name></member>
      <member refid="classmangrove_1_1model_1ac128db17c9f55de416f81130119bf489" prot="protected" virt="non-virtual"><scope>mangrove::model</scope><name>_id</name></member>
      <member refid="classmangrove_1_1model_1a0d52a9bedf4808ef8cc98f02a9e9083b" prot="public" virt="non-virtual"><scope>mangrove::model</scope><name>collection</name></member>
      <member refid="classmangrove_1_1model_1a4dac6424aa52c96fc184926f00570836" prot="public" virt="non-virtual"><scope>mangrove::model</scope><name>count</name></member>
      <member refid="classmangrove_1_1model_1ada372a128865c770d7b2334990ad6f5f" prot="public" virt="non-virtual"><scope>mangrove::model</scope><name>delete_many</name></member>
      <member refid="classmangrove_1_1model_1a18e41c79c88891dcfaea88e3cc6df09c" prot="public" virt="non-virtual"><scope>mangrove::model</scope><name>delete_one</name></member>
      <member refid="classmangrove_1_1model_1a14472adea853a46b9e76aef6cb2cd246" prot="public" virt="non-virtual"><scope>mangrove::model</scope><name>drop</name></member>
      <member refid="classmangrove_1_1model_1aa0be0e6204d17a62797f3384cbb5a6b1" prot="public" virt="non-virtual"><scope>mangrove::model</scope><name>find</name></member>
      <member refid="classmangrove_1_1model_1a36488dcf05af9a7426bdebb40fbbd8d4" prot="public" virt="non-virtual"><scope>mangrove::model</scope><name>find_one</name></member>
      <member refid="classmangrove_1_1model_1a7250891868c6bab48f1cd741f8164b46" prot="public" virt="non-virtual"><scope>mangrove::model</scope><name>insert_many</name></member>
      <member refid="classmangrove_1_1model_1a14db2af5bc4d46898e2a643797bff060" prot="public" virt="non-virtual"><scope>mangrove::model</scope><name>insert_many</name></member>
      <member refid="classmangrove_1_1model_1ad9695cdffd6a1abcd62d791caa6943e8" prot="public" virt="non-virtual"><scope>mangrove::model</scope><name>insert_one</name></member>
      <member refid="classmangrove_1_1model_1aad4ed1da2c483620d05c93cdc506e356" prot="public" virt="non-virtual"><scope>mangrove::model</scope><name>model</name></member>
      <member refid="classmangrove_1_1model_1a090ccf608ccb4b8aa612778606a860a7" prot="public" virt="non-virtual"><scope>mangrove::model</scope><name>model</name></member>
      <member refid="classmangrove_1_1model_1a1502c90fc3a7c9664a2578efb63e0371" prot="public" virt="non-virtual"><scope>mangrove::model</scope><name>remove</name></member>
      <member refid="classmangrove_1_1model_1a0dd3802e09d149f4bfa8661b7992c177" prot="public" virt="non-virtual"><scope>mangrove::model</scope><name>save</name></member>
      <member refid="classmangrove_1_1model_1aa292dacb7aa8fc25c9f0fa758e5419fd" prot="public" virt="non-virtual"><scope>mangrove::model</scope><name>setCollection</name></member>
      <member refid="classmangrove_1_1model_1a954cb71260009968735e59bc3c3b65f9" prot="public" virt="non-virtual"><scope>mangrove::model</scope><name>setCollection</name></member>
      <member refid="classmangrove_1_1model_1ab811a568d41f8721b679d5e509bf9072" prot="public" virt="non-virtual"><scope>mangrove::model</scope><name>update_many</name></member>
      <member refid="classmangrove_1_1model_1ab0d60c7d8c2285e90456547f40b9f873" prot="public" virt="non-virtual"><scope>mangrove::model</scope><name>update_one</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
