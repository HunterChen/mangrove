<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classboson_1_1UnderlyingBSONDataBase" kind="class" language="C++" prot="public">
    <compoundname>boson::UnderlyingBSONDataBase</compoundname>
    <includes refid="bson__archiver_8hpp" local="no">bson_archiver.hpp</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classboson_1_1UnderlyingBSONDataBase_1a640246947c789871bb1ca7415c39fd13" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; uint8_t &gt;</type>
        <definition>std::shared_ptr&lt;uint8_t&gt; boson::UnderlyingBSONDataBase::_underlyingBSONData</definition>
        <argsstring></argsstring>
        <name>_underlyingBSONData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/boson/bson_archiver.hpp" line="93" column="1" bodyfile="src/boson/bson_archiver.hpp" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classboson_1_1UnderlyingBSONDataBase_1a60f967af4768c85306b53fe8094a2a8b" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t boson::UnderlyingBSONDataBase::_underlyingBSONDataSize</definition>
        <argsstring></argsstring>
        <name>_underlyingBSONDataSize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/boson/bson_archiver.hpp" line="97" column="1" bodyfile="src/boson/bson_archiver.hpp" bodystart="97" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classboson_1_1UnderlyingBSONDataBase_1a73e1386508489d038650c15f03afc408" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void boson::UnderlyingBSONDataBase::setUnderlyingBSONData</definition>
        <argsstring>(std::shared_ptr&lt; uint8_t &gt; ptr, size_t size)</argsstring>
        <name>setUnderlyingBSONData</name>
        <param>
          <type>std::shared_ptr&lt; uint8_t &gt;</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/boson/bson_archiver.hpp" line="83" column="1" bodyfile="src/boson/bson_archiver.hpp" bodystart="83" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="classboson_1_1UnderlyingBSONDataBase_1afac61084f077f118a693ea26bcc30a64" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const bsoncxx::document::view</type>
        <definition>const bsoncxx::document::view boson::UnderlyingBSONDataBase::getUnderlyingBSONData</definition>
        <argsstring>()</argsstring>
        <name>getUnderlyingBSONData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/boson/bson_archiver.hpp" line="88" column="1" bodyfile="src/boson/bson_archiver.hpp" bodystart="88" bodyend="90"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A base class that holds a shared_ptr to the binary data for a BSON document. </para>    </briefdescription>
    <detaileddescription>
<para>If a class you are serializing contains any of the bsoncxx view types (b_utf8, b_document, b_array, b_binary), you must have that class inherit this base so that the views don&apos;t point to deallocated memory.</para><para>When using the <ref refid="classboson_1_1BSONInputArchive" kindref="compound">BSONInputArchive</ref> to deserialize a class that inherits from this base, the data will be automatically loaded into this class using setUnderlyingBSONData(). </para>    </detaileddescription>
    <location file="src/boson/bson_archiver.hpp" line="81" column="1" bodyfile="src/boson/bson_archiver.hpp" bodystart="81" bodyend="98"/>
    <listofallmembers>
      <member refid="classboson_1_1UnderlyingBSONDataBase_1a640246947c789871bb1ca7415c39fd13" prot="private" virt="non-virtual"><scope>boson::UnderlyingBSONDataBase</scope><name>_underlyingBSONData</name></member>
      <member refid="classboson_1_1UnderlyingBSONDataBase_1a60f967af4768c85306b53fe8094a2a8b" prot="private" virt="non-virtual"><scope>boson::UnderlyingBSONDataBase</scope><name>_underlyingBSONDataSize</name></member>
      <member refid="classboson_1_1UnderlyingBSONDataBase_1afac61084f077f118a693ea26bcc30a64" prot="public" virt="non-virtual"><scope>boson::UnderlyingBSONDataBase</scope><name>getUnderlyingBSONData</name></member>
      <member refid="classboson_1_1UnderlyingBSONDataBase_1a73e1386508489d038650c15f03afc408" prot="public" virt="non-virtual"><scope>boson::UnderlyingBSONDataBase</scope><name>setUnderlyingBSONData</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
