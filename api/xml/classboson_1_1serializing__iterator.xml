<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classboson_1_1serializing__iterator" kind="class" language="C++" prot="public">
    <compoundname>boson::serializing_iterator</compoundname>
    <basecompoundref prot="public" virt="non-virtual">std::iterator&lt; std::input_iterator_tag, bsoncxx::document::value &gt;</basecompoundref>
    <includes refid="mapping__functions_8hpp" local="no">mapping_functions.hpp</includes>
    <templateparamlist>
      <param>
        <type>class Iter</type>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classboson_1_1serializing__iterator_1addcc223468b0a07a1203117d34f18dc4" prot="private" static="no" mutable="no">
        <type>Iter</type>
        <definition>Iter boson::serializing_iterator&lt; Iter &gt;::_ci</definition>
        <argsstring></argsstring>
        <name>_ci</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/boson/mapping_functions.hpp" line="160" column="1" bodyfile="src/boson/mapping_functions.hpp" bodystart="160" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classboson_1_1serializing__iterator_1a954b4fcbaed17765d8b4503e20d64e3b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>boson::serializing_iterator&lt; Iter &gt;::serializing_iterator</definition>
        <argsstring>(Iter ci)</argsstring>
        <name>serializing_iterator</name>
        <param>
          <type>Iter</type>
          <declname>ci</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/boson/mapping_functions.hpp" line="132" column="1" bodyfile="src/boson/mapping_functions.hpp" bodystart="132" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="classboson_1_1serializing__iterator_1ae856104676df68c42526cc8610dad49c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>boson::serializing_iterator&lt; Iter &gt;::serializing_iterator</definition>
        <argsstring>(const serializing_iterator &amp;si)</argsstring>
        <name>serializing_iterator</name>
        <param>
          <type>const <ref refid="classboson_1_1serializing__iterator" kindref="compound">serializing_iterator</ref> &amp;</type>
          <declname>si</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/boson/mapping_functions.hpp" line="135" column="1" bodyfile="src/boson/mapping_functions.hpp" bodystart="135" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="classboson_1_1serializing__iterator_1a49e585e277d9ef27372fa14b0aab1475" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classboson_1_1serializing__iterator" kindref="compound">serializing_iterator</ref> &amp;</type>
        <definition>serializing_iterator&amp; boson::serializing_iterator&lt; Iter &gt;::operator++</definition>
        <argsstring>()</argsstring>
        <name>operator++</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/boson/mapping_functions.hpp" line="138" column="1" bodyfile="src/boson/mapping_functions.hpp" bodystart="138" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="classboson_1_1serializing__iterator_1aa1141c3b49c9f613fef712542ff3fbb8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void boson::serializing_iterator&lt; Iter &gt;::operator++</definition>
        <argsstring>(int)</argsstring>
        <name>operator++</name>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/boson/mapping_functions.hpp" line="143" column="1" bodyfile="src/boson/mapping_functions.hpp" bodystart="143" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="classboson_1_1serializing__iterator_1a365360054c75836eb645ed164b7941f0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool boson::serializing_iterator&lt; Iter &gt;::operator==</definition>
        <argsstring>(const serializing_iterator &amp;rhs)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classboson_1_1serializing__iterator" kindref="compound">serializing_iterator</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/boson/mapping_functions.hpp" line="147" column="1" bodyfile="src/boson/mapping_functions.hpp" bodystart="147" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="classboson_1_1serializing__iterator_1a3610250dca9675cb430467876cab60be" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool boson::serializing_iterator&lt; Iter &gt;::operator!=</definition>
        <argsstring>(const serializing_iterator &amp;rhs)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classboson_1_1serializing__iterator" kindref="compound">serializing_iterator</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/boson/mapping_functions.hpp" line="151" column="1" bodyfile="src/boson/mapping_functions.hpp" bodystart="151" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="classboson_1_1serializing__iterator_1ac713e12f78aabb9280fe50b56a532b2a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bsoncxx::document::value</type>
        <definition>bsoncxx::document::value boson::serializing_iterator&lt; Iter &gt;::operator*</definition>
        <argsstring>()</argsstring>
        <name>operator*</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/boson/mapping_functions.hpp" line="155" column="1" bodyfile="src/boson/mapping_functions.hpp" bodystart="155" bodyend="157"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>An iterator that wraps another iterator of serializable objects, and yields BSON document views corresponding to those documents. </para>    </briefdescription>
    <detaileddescription>
<para>TODO what to do if serialization fails? </para>    </detaileddescription>
    <inheritancegraph>
      <node id="310">
        <label>boson::serializing_iterator&lt; Iter &gt;</label>
        <link refid="classboson_1_1serializing__iterator"/>
        <childnode refid="311" relation="public-inheritance">
        </childnode>
      </node>
      <node id="311">
        <label>std::iterator&lt; std::input_iterator_tag, bsoncxx::document::value &gt;</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="312">
        <label>boson::serializing_iterator&lt; Iter &gt;</label>
        <link refid="classboson_1_1serializing__iterator"/>
        <childnode refid="313" relation="public-inheritance">
        </childnode>
      </node>
      <node id="313">
        <label>std::iterator&lt; std::input_iterator_tag, bsoncxx::document::value &gt;</label>
      </node>
    </collaborationgraph>
    <location file="src/boson/mapping_functions.hpp" line="130" column="1" bodyfile="src/boson/mapping_functions.hpp" bodystart="129" bodyend="161"/>
    <listofallmembers>
      <member refid="classboson_1_1serializing__iterator_1addcc223468b0a07a1203117d34f18dc4" prot="private" virt="non-virtual"><scope>boson::serializing_iterator</scope><name>_ci</name></member>
      <member refid="classboson_1_1serializing__iterator_1a3610250dca9675cb430467876cab60be" prot="public" virt="non-virtual"><scope>boson::serializing_iterator</scope><name>operator!=</name></member>
      <member refid="classboson_1_1serializing__iterator_1ac713e12f78aabb9280fe50b56a532b2a" prot="public" virt="non-virtual"><scope>boson::serializing_iterator</scope><name>operator*</name></member>
      <member refid="classboson_1_1serializing__iterator_1a49e585e277d9ef27372fa14b0aab1475" prot="public" virt="non-virtual"><scope>boson::serializing_iterator</scope><name>operator++</name></member>
      <member refid="classboson_1_1serializing__iterator_1aa1141c3b49c9f613fef712542ff3fbb8" prot="public" virt="non-virtual"><scope>boson::serializing_iterator</scope><name>operator++</name></member>
      <member refid="classboson_1_1serializing__iterator_1a365360054c75836eb645ed164b7941f0" prot="public" virt="non-virtual"><scope>boson::serializing_iterator</scope><name>operator==</name></member>
      <member refid="classboson_1_1serializing__iterator_1a954b4fcbaed17765d8b4503e20d64e3b" prot="public" virt="non-virtual"><scope>boson::serializing_iterator</scope><name>serializing_iterator</name></member>
      <member refid="classboson_1_1serializing__iterator_1ae856104676df68c42526cc8610dad49c" prot="public" virt="non-virtual"><scope>boson::serializing_iterator</scope><name>serializing_iterator</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
